#!/usr/bin/env bash

#temple url
temple_url="https://github.com/bridgewwater/golang-project-temple-base.git"
temple_repo_host="github.com"
temple_group="bridgewwater"
temple_name="golang-project-temple-base"
temple_branch="main"

new_repo_host=${temple_repo_host}
new_repo_group=${temple_group}
new_project=

shell_run_name=$(basename $0)
shell_run_path=$(
  cd $(dirname $0)
  pwd
)

function Usage() {
  cat <<HELP
${shell_run_name} can use fast init golang project with github
  Warning must use golang SDK 1.12+
  now temple is ${temple_url}

default repo setting
  group/user: ${temple_group}
  reop host : ${temple_repo_host}

Usage: ${shell_run_name} [newproject] [new group/user] [new host]

Example:
    ${shell_run_name} newgoprojt
    ${shell_run_name} newgoprojt sinlov github.com
HELP
}

ARG=$1
if [[ "$ARG" =~ "-h" ]]; then
  Usage
  exit 0
fi

pV() {
  echo -e "\033[;36m$1\033[0m"
}
pI() {
  echo -e "\033[;32mINFO: $1\033[0m"
}
pD() {
  echo -e "\033[;34mDEBUG: $1\033[0m"
}
pW() {
  echo -e "\033[;33mWARN: $1\033[0m"
}
pE() {
  echo -e "\033[;31mERROR: $1\033[0m"
}

checkFuncBack() {
  if [ ! $? -eq 0 ]; then
    echo -e "\033[;31mRun [ $1 ] error exit code 1\033[0m"
    exit 1
    # else
    #   echo -e "\033[;30mRun [ $1 ] success\033[0m"
  fi
}

checkBinary() {
  evn_checker=$(which $1)
  checkFuncBack "which $1"
  if [ ! -n "$evn_checker" ]; then
    echo -e "\033[;31mCheck event [ $1 ] error exit\033[0m"
    exit 1
    # else
    #   echo -e "\033[;32mCli [ $1 ] event check success\033[0m\n-> \033[;34m$1 at Path: ${evn_checker}\033[0m"
  fi
}

release="unix"
bit=""
check_sys() {
  case "$(uname)" in
  Darwin*)
    release="Darwin"
    ;;
  *)
    if [[ -f /etc/redhat-release ]]; then
      release="centos"
    elif cat /etc/issue | grep -q -E -i "debian"; then
      release="debian"
    elif cat /etc/issue | grep -q -E -i "ubuntu"; then
      release="ubuntu"
    elif cat /etc/issue | grep -q -E -i "centos|red hat|redhat"; then
      release="centos"
    elif cat /proc/version | grep -q -E -i "debian"; then
      release="debian"
    elif cat /proc/version | grep -q -E -i "ubuntu"; then
      release="ubuntu"
    elif cat /proc/version | grep -q -E -i "centos|red hat|redhat"; then
      release="centos"
    fi
    ;;
  esac
  bit=$(uname -m)
}
check_sys

# replace file text by regular
# $1 file
# $2 regular from
# $3 regular to
# Error will return 1
replaceFileByRegular() {
  target_file=$1
  word_from=$2
  word_to=$3
  if [[ -z "${word_from}" ]]; then
    pW "replaceFileByRegular word_from is empty"
    return 1
  fi
  if [[ -z "${word_to}" ]]; then
    pW "replaceFileByRegular word_to is empty"
    return 1
  fi
  if [[ "${release}" -eq "Darwin" ]]; then
    # pD "in darwin ; word_from: ${word_from} ; word_to: ${word_to} ; target_file: ${target_file}"
    sed -i "" "s#${word_from}#${word_to}#g" ${target_file}
  else
    # pD "in other ; word_from: ${word_from} ; word_to: ${word_to} ; target_file: ${target_file}"
    sed -i "s#${word_from}#${word_to}#g" ${target_file}
  fi
}

# find file list and replace text by regular
# $1 target_file_root use . or folder
# $2 target_file_regular
# $3 word_regular_from
# $4 word_regular_to
# Error will return 1
findFileReplaceByRegular() {
  target_file_root=$1
  target_file_regular=$2
  word_regular_from=$3
  word_regular_to=$4
  if [[ -z "${target_file_root}" ]]; then
    pW "findFileReplaceByRegular target_file_regular is empty"
    return 1
  fi
  if [[ -z "${target_file_regular}" ]]; then
    pW "findFileReplaceByRegular target_file_regular is empty"
    return 1
  fi
  if [[ -z "${word_regular_from}" ]]; then
    pW "findFileReplaceByRegular word_regular_from is empty"
    return 1
  fi
  if [[ -z "${word_regular_to}" ]]; then
    pW "findFileReplaceByRegular word_regular_to is empty"
    return 1
  fi
  if [[ "${release}" -eq "Darwin" ]]; then
    # pD "in darwin ; target_file_regular: ${target_file_regular} ; word_regular_from: ${word_regular_from} ; word_regular_to: ${word_regular_to}"
    find "${target_file_root}" -name "${target_file_regular}" | xargs sed -i "" "s#${word_regular_from}#${word_regular_to}#g"
  else
    # pD "in other ; target_file_regular: ${target_file_regular} ; word_regular_from: ${word_regular_from} ; word_regular_to: ${word_regular_to}"
    find "${target_file_root}" -name "${target_file_regular}" | xargs sed -i "s#${word_regular_from}#${word_regular_to}#g"
  fi
}


removeFileExist() {
  target_file_path=$1
  if [[ -z "${target_file_path}" ]]; then
    pW "removeFileByRegular target_file_path is empty"
    return 1
  fi
  if [[ -f "${target_file_path}" ]]; then
    rm -f ${target_file_path}
    checkFuncBack "rm -f ${target_file_path}"
    pI "removeFileExist ${target_file_path}"
  else
    pW "want remove file not exist at: ${target_file_path}"
  fi
}

# remove file by regular
# $1 target_file_regular
# Error will return 1
removeFileByRegular() {
  target_file_regular=$1
  if [[ -z "${target_file_regular}" ]]; then
    pW "removeFileByRegular target_file_regular is empty"
    return 1
  fi
  # pW "removeFileByRegular cli: find . -name ${target_file_regular} | xargs rm -f"
  find . -name "${target_file_regular}" | xargs rm -f
}

checkBinary git
checkBinary make
checkBinary go

if [[ $# -lt 1 ]]; then
  echo -e "\033[;31mCLI error!\033[0m see ${shell_run_name} -h"
  exit 1
fi

new_project=$1
if [ ! -n "${new_project}" ]; then
  echo -e "\033[;31mError you must set new_project at first!\033[0m"
  exit 1
fi

if [ -d ${new_project} ]; then
  echo -e "\033[;31mError new new project is exist -> ${new_project}\033[0m"
  exit 1
fi

if [[ -n $2 ]]; then
  new_repo_group="$2"
else
  #   echo "set default repo group: ${temple_group}"
  new_repo_group=${temple_group}
fi

if [[ -n $3 ]]; then
  new_repo_host="$3"
else
  #   echo "set default repo host: ${temple_repo_host}"
  new_repo_host=${temple_repo_host}
fi

echo -e "=> temple url: ${temple_url}
=> temple_branch:  ${temple_branch}
-> new_repo_host:  ${new_repo_host}
-> new_group:      ${new_repo_group}
-> new_project:    ${new_project}
-> new remote url: http://${new_repo_host}/${new_repo_group}/${new_project}
"

pI "Clone from ${temple_url}"
git clone --depth 1 ${temple_url} -b ${temple_branch} ${new_project}
rm -rf ${new_project}/.git/
sleep 1

removeFileExist ${new_project}/${shell_run_name}
removeFileExist ${new_project}/go.sum
removeFileExist ${new_project}/CHANGELOG.md
# replace code text at file
replaceFileByRegular ${new_project}/README.md ${temple_repo_host}\/${temple_group}\/${temple_name} ${new_repo_host}\/${new_repo_group}\/${new_project}
replaceFileByRegular ${new_project}/go.mod ${temple_repo_host}\/${temple_group}\/${temple_name} ${new_repo_host}\/${new_repo_group}\/${new_project}
replaceFileByRegular ${new_project}/README.md ${temple_group}\/${temple_name} ${new_repo_group}\/${new_project}
replaceFileByRegular ${new_project}/Dockerfile ${temple_group}\/${temple_name} ${new_repo_group}\/${new_project}
replaceFileByRegular ${new_project}/Dockerfile ${temple_group} ${new_repo_group}
replaceFileByRegular ${new_project}/Dockerfile ${temple_name} ${new_project}
replaceFileByRegular ${new_project}/Dockerfile.s6 ${temple_group}\/${temple_name} ${new_repo_group}\/${new_project}
replaceFileByRegular ${new_project}/Dockerfile.s6 ${temple_group} ${new_repo_group}
replaceFileByRegular ${new_project}/Dockerfile.s6 ${temple_name} ${new_project}
replaceFileByRegular ${new_project}/README.md ${temple_repo_host} ${new_repo_host}
replaceFileByRegular ${new_project}/README.md ${temple_name} ${new_project}
replaceFileByRegular ${new_project}/docker-compose.yml ${temple_name} ${new_project}
replaceFileByRegular ${new_project}/Makefile ${temple_name} ${new_project}
replaceFileByRegular ${new_project}/MakeGoDist.mk ${temple_name} ${new_project}
replaceFileByRegular ${new_project}/MakeDocker.mk ${temple_group} ${new_repo_group}
replaceFileByRegular ${new_project}/package.json ${temple_group}\/${temple_name} ${new_repo_group}\/${new_project}
replaceFileByRegular ${new_project}/package.json ${temple_name} ${new_project}
# replace code at folder
findFileReplaceByRegular ${new_project} "*.go" ${temple_repo_host}\/${temple_group}\/${temple_name} ${new_repo_host}\/${new_repo_group}\/${new_project}
findFileReplaceByRegular ${new_project} "*.go" ${temple_group} ${new_repo_group}
findFileReplaceByRegular ${new_project} "*.go" ${temple_name} ${new_project}
findFileReplaceByRegular ${new_project} "*.mk" ${temple_repo_host}\/${temple_group}\/${temple_name} ${new_repo_host}\/${new_repo_group}\/${new_project}
findFileReplaceByRegular ${new_project} "*.mk" ${temple_group} ${new_repo_group}
findFileReplaceByRegular ${new_project} "*.mk" ${temple_name} ${new_project}
findFileReplaceByRegular ${new_project} "*.md" ${temple_group} ${new_repo_group}
findFileReplaceByRegular ${new_project} "*.md" ${temple_name} ${new_project}

# remove README.md last line
  if [[ ${release} -eq "Darwin" ]]; then
    sed -i "" '91,100d' ./${new_project}/README.md
  else
    sed -i '91,100d' ./${new_project}/README.md
  fi

# re init go mod
#cd ${new_project}
#if [[ -f "go.mod" ]]; then
#  rm -f go.mod
#  rm -f go.sum
#  GO111MODULE=on go mod init
#fi
#cd ..${new_project}

read -p "Do you can keep sample code (default: no)? [y/n] " read_want_keep_sample_code
case ${read_want_keep_sample_code} in
[yY]*)
  echo " now keep sample code"
  ;;
*)
  echo " just remove sample code at stack and stack_test"
  if [[ -d ./${new_project}/stack ]]; then
    rm -rf ./${new_project}/stack
  fi
  if [[ -d ./${new_project}/stack_test ]]; then
    rm -rf ./${new_project}/stack_test
  fi
  ;;
esac

# choose LICENSE
read -p "Choose license (default: apache)? [mit] " read_choose_license
case ${read_choose_license} in
mit*)
  mv ./${new_project}/LICENSE-MIT ./${new_project}/LICENSE
  ;;
*)
  mv ./${new_project}/LICENSE-APACHE ./${new_project}/LICENSE
  ;;
esac
# move other LICENCE
removeFileByRegular "LICENSE-*"

read -p "Do you can keep travis CI (default: no)? [y/n] " read_want_keep_travis_ci
case ${read_want_keep_travis_ci} in
[yY]*)
  echo " now keep travis CI"
  ;;
*)
  echo " just remove travis CI"
  if [[ -f ./${new_project}/.travis.yml ]]; then
    rm ./${new_project}/.travis.yml
  fi
  if [[ ${release} -eq "Darwin" ]]; then
    sed -i "" '2,2d' ./${new_project}/README.md
  else
    sed -i '2,2d' ./${new_project}/README.md
  fi
  ;;
esac

read -p "Do you can remove github action CI (default: no)? [y/n] " read_want_remove_action_ci
case ${read_want_remove_action_ci} in
[yY]*)
  echo " just remove github action CI"
  if [[ -d ./${new_project}/.github/ ]]; then
    rm -rf ./${new_project}/.github/
  fi
  if [[ ${release} -eq "Darwin" ]]; then
    sed -i "" '1,1d' ./${new_project}/README.md
  else
    sed -i '1,1d' ./${new_project}/README.md
  fi
  ;;
*)
  echo " now keep action CI"
  ;;
esac

# remove shell util
rm ./${new_project}/temp-golang-base

cd ..
new_project="$(pwd)/${new_project}"
echo -e "Finish make ${temple_name} project => \033[;32m${new_project}\033[0m"
echo -e "\033[;34mFor coding, this path can in \$GOPATH when set PATH GO111MODULE=on\033[0m"
