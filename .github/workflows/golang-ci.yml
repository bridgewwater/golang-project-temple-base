name: golang-ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

#env:
#  CODECOV_TOKEN: '${{ secrets.CODECOV_TOKEN }}'

jobs:
  golang-ci:
    name: glang-ci
    strategy:
      matrix:
        go:
         - '^1.18'
         - '1.18.10'
        os:
          - macos-latest
          - windows-latest
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go SDK
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          cache: false
      - name: Print env info
        run: |
          go env
          go version

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.53.2
          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: by default the `.golang-ci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=30m --config=/my/path/.golang-ci.yml --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional:The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

      - name: Run go install check
        run: go get -t -v ./...

      - name: Run go build
        run: go build -v ./...

      - name: Run test
        run: go test -v ./...

      - name: Run test benchmark
        run: go test -run none -bench . -benchmem -v ./...

      - name: Run test coverage
        run: |
          go test -cover -coverprofile coverage.txt -covermode count -coverpkg ./... -tags test -v ./...
          go tool cover -func coverage.txt
