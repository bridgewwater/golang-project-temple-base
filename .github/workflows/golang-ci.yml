name: golang-ci

on:
  workflow_call: # https://docs.github.com/actions/using-workflows/reusing-workflows#using-inputs-and-secrets-in-a-reusable-workflow
    inputs:
      run_test_case:
        description: 'test run flag'
        default: true
        required: false
        type: boolean
      run_golangci_lint:
        description: 'run golangci-lint flag'
        default: true
        required: false
        type: boolean
      run_benchmark:
        description: 'test benchmark run flag'
        default: false
        required: false
        type: boolean
      run_test_coverage:
        description: 'test coverage run flag'
        default: true
        required: false
        type: boolean


permissions: # https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions#permissions
  contents: read

jobs:
  golang-ci:
    name: golang-ci
    strategy:
      matrix:
        go:
          - '^1.19'
          - '1.19.13'
        os:
          - macos-latest
          - windows-latest
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go SDK
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: false
      - name: Print env info
        run: |
          go env
          go version

      - name: Run go install check
        run: go get -t -v ./...

      - name: Run go build
        run: go build -v -tags test ./...

      - name: Run test
        if: ${{ inputs.run_test_case }}
        run: go test -v -tags test ./...

      - name: Run golangci-lint
        # https://github.com/golangci/golangci-lint-action?tab=readme-ov-file#compatibility
        # * `v8.0.0` works with `golangci-lint` version >= `v2.1.0`
        # * `v7.0.0` supports golangci-lint v2 only.
        uses: golangci/golangci-lint-action@v8
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          # version: v2.0.0 for go version 1.23.0+
          version: latest

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          # args: --timeout=10m --config=.golangci-v2.yaml --issues-exit-code=0
          args: --timeout=10m --config=.golangci-v2.yaml

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

      - name: Run test benchmark
        if: ${{ inputs.run_benchmark }}
        run: go test -run none -tags test -bench . -benchmem -v ./...

      - name: Run test coverage
        if: ${{ inputs.run_test_coverage }}
        run: |
          go test -cover -tags test -coverprofile coverage.txt -covermode count -coverpkg ./... -v ./...
          go tool cover -func coverage.txt
